> a(A,B) :- X=[A,B],(member(5,X);Y=1),printAVM([X,Y]).
> ?- a(1,5).
< < 1, 5 >, bot >
yes
> ?- a(1,2).
< bot, 1 >
yes

上は正しいが，下は < < 1, 2 >, 1 > と表示されるはず．

> b(A,B,X) :- X=[A,B],(member(5,X);Y=1),printAVM([X,Y]).
> ?- b(1,2,X).
< < 1, 2 >, 1 >
X: < 1, 2 >
> e(A,B) :- X=[A,B],printAVM(X),(member(5,X);Y=1),printAVM([X,Y]).
> ?- e(1,2).
< 1, 2 >
< < 1, 2 >, 1 >
yes

は正しいが，

> c(A,B) :- _ = X & [A,B],(member(5,X);Y=1),printAVM([X,Y]).
> ?- c(1,2).
< bot, 1 >
yes
> d(A,B) :- (member(5,X & [A,B]);Y=1),printAVM([X,Y]).
> ?- d(1,2).
< bot, 1 >

はだめ．＝の最適化によって，a, c は d と同じように処理されている．

つまり，
・述語の body の中だけで出てくる変数を，
・disjunction の中ではじめて使っていて，
・その disjunct が失敗すると，
その変数の binding が切れてしまう．

以下，牧野さんによる回答．

----------------------------------------------------------------------
disjunction の片方にしか出てこない変数は、pgoaldisj::Compile のなかで 
AddCode(C_LINK1ST, ...) するようになっていて、未初期化のまま disjunction 
後に行かないようになってます。ここで必ず bot を作っているのが問題の根源
です。しかし、この時点では初期化するとしたら何を代入したらいいのかの情報
を得ることはできません。ptree 構造を作る時点で工夫する必要があります。

問題は
> d(A,B) :- printAVM("hi"), (member(5,X & [A,B]);Y=1),printAVM([X,Y]).
> ?- d(1,2).
に集約されるわけですよね。簡略化のため printAVM("hi") を入れてあります。
この X = [A,B] は決して失敗しない (X が初出だから) ので、次のどれかに等
価変形できます。正確ではないですが処理の順序として。

1) d(A,B) :- printAVM("hi"), _=X&[A,B], (member(5,X);Y=1),printAVM([X,Y]).
2) d(A,B) :- printAVM("hi"), (member(5,X&[A,B]);Y=1,_=X&[A,B]),printAVM([X,Y]).
3) d(A,B) :- printAVM("hi"), (member(5,X&[A,B]);Y=1),printAVM([X&[A,B],Y]).

まずどれにするかを選んでください。
で、そうなるように ptree 構造をつくればいいことになります。

new pgoaldisj を呼んでいるのは structur.cpp 中の4箇所で、そのうち必要な
ところでは ShareList slcopy(sl); というのを作っていると思います。
ShareList は、既出の変数をハッシュに入れて管理しているクラスです。
GenPTreeOfDescription のなかで、いちど ptree を作った素性構造のポインタ
を ShareList に登録し、初回はまじめに ptree をつくり、2回目以降は 
pvariable だけの ptree を返すようになっています。
pgoaldisj のときに sl をコピーしているのは
p :- ( q(X & [Y]) ; r(X) ).
のようなときに、r(X) の呼び出し時に X & [Y] が構成されるようにということ
です。

その後、sl と slcopy をマージして返していますが、このマージする時点で、
sl と slcopy の差異を比較すれば、disjunction のどちらかだけで初出の変数
がピックアップできます。ここで上記どれかの対策を打てばいいことになります。
具体的には、X&[...] に相当する ptree は GenPTreeOfDescription(sl, X, bot) 
の戻り値で得られるので、この戻り値を pgoalconj で既存の ptree にくっつけ
てやればいいことになります。

　問題は、上記 1) 2) は、disjunction の後ろで変数を使っていない大多数の
場合には実行時間が無駄に低下することです (*1)。後ろで使っているかどうか
を確かめられればいいのですが、現在の GenPTree シリーズの設計ではその情報
は得られないので、引数を追加してやる必要があります。3) だと、2回 X&[A,B] 
のコードが実行されることも問題ですが、変数が 2 状態 (初出/既出) ではなく 
3 状態 (初出/既出で再度の ptree 不要/既出だけど再度の ptree 必要) になっ
てしまい、現在の ShareList での管理方法を変えなければいけなくなります。

(*1) p(X,Y) :- (X = Y ; print([1,2,3,4])). みたいな述語の場合、実際は
print( V1& [1,2,3,4] )
なわけで、これが全部 disjunction のもう片方で初期化されると、もっと長い 
disjunction ではオーバーヘッドがすごいことになります。

